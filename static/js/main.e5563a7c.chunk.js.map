{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constant.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5563a7c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        \r\n        <div className = 'tc bg-light-green dib br3 pa3 na2 grow bw2 shadow-5'>\r\n            <img alt= 'robots' src={`https://robohash.org/${id}?200x200`} />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList = ({robots}) => {  \r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                            <Card \r\n                                key= {i} \r\n                                id= {robots[i].id} \r\n                                name= {robots[i].name} \r\n                                email= {robots[i].email}\r\n                                />\r\n                            ); \r\n                        })\r\n            }  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-bue'\r\n            type='search' \r\n            placeholder= 'search robots'\r\n            onChange = {searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style= {{overflowY: 'scroll' , border: '1x solid back', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING ='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n//import ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\nclass App extends Component {       \r\n    componentDidMount() {\r\n            this.props.onRequestRobots();   \r\n        }\r\n        \r\n\r\n    render() { \r\n            const { searchField, onSearchChange, robots, isPending } = this.props;\r\n            const filteredRobots = robots.filter(robot => {\r\n                return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n            })  \r\n            return isPending ? \r\n                <h1>Loading</h1>    :\r\n            \r\n                         (\r\n                            <div className='tc'>\r\n                                <h1 className='f1'>RoboFriends</h1>\r\n                                <SearchBox searchChange= {onSearchChange}/>\r\n                                <Scroll>\r\n                                        <CardList robots = {filteredRobots}/>\r\n                                </Scroll>\r\n                            </div>\r\n                        );\r\n                    }\r\n    }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n } from './constant';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {  //calling dispatch on a non object property\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n    \r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","//Housing the STATE protocol\r\n\r\nimport { CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n } from './constant';\r\n\r\nconst initialStateSearch = { \r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots= {\r\n    isPending: false,\r\n    robots:[],\r\n    error: ''\r\n}\r\n\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css'; \r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots }) \r\nconst store = \r\n   createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n            <Provider store ={store}>\r\n               <App /> \r\n            </Provider>, document.getElementById('root')\r\n            );\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}